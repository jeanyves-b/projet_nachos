partie 1 :
	définir l'utilité de la partie pour le rapport

partie 2 :
	writedown/readavail
		utilisation des sémaphore/mutex
		faire une chier de jeux de tests... partout
	prise en compte de tty
		tester le 1er caractère par rapport à EOF et q
		vider le buffer après q si q présent en début de ligne
	ecrire <c> au lieu de c
		putchar < avant et putchar > après le putchar du caractère si le caractère est c
		

partie 3 :
	faire synchconsole

	tests :
		utilisation courante
		ecriture/lecture parallèle
		trop de caractères
		pas de caractère

partie 4 :
	PutChar -> SyscallException -> Handler -> SynchPutChar
	création de l'appel system
		attribution d'un numéro à l'appel GetChar
	partie assembleur
		caractère mis dans le registre 4 (sous forme d'int)
	modifier ExeptionHandler
		transformation en switch
		ajout du cas d'une interruption de type GetChar
			appel à la méthode SynchPutChar de SynchConsole
				instanciation d'un objet SynchConsole à l'inisialisation du système.
	ajouter les fonctions aux fonctions utilisable

	tests :
		test handler
			un test par appels
			+ test pour des appels bidon
		test d'initialisation de la console

partie 5 :
	faire un truc qui permet de transformer un pointeur mips en pointeur linux

	test :
		avec une chaine cohérente
		avec une chaine vide
		avec trop de caractère
		avec pas asez de caractère
		avec une chaine monstrueuse
		avec une chaine pas assez grande

partie 6 :
	implémenter le return
	détécter les fins de fichiers de code

partie 7 :
	registre de retour : r2
		fin de fichier?
		/!\ fin de ligne et débordement
	appel concurent
	fuite mémoire

partie 8 :
	ettofer feof pour exclure '\127'
	renvoyer un int avec SynchGetChar

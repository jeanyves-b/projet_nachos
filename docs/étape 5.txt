système de fichier actuel //not anymore
	système de fichier à un seul niveau
	dossier -> fichier
	au plus 10 entrées

tester les fonction avant utilisation

au moment de l'ouverture, Nachos lit sur le disque les info d'espace libre et du repertoire

gros choix
	implémentation d'une structure parallèle ou bien uniquement des lecture sur le disque?

partie 1 : implantation d'une hiérarchie de répertoires
aller lire partie 6
	->répertoire peut contenir un répertoire

	création de fonction :
		créer un repertoire
		se déplacer (avant/arrière)
		supprimer un répertoire

	2 des entrée des répertoire sont réservé pour .(actuel) et ..(précédent)
	sauf la racine pour qui .. représente aussi l'actuel
	
	problème :
		enregistrement de la structure à la fermeture de la machine
		restoration de la structure au moment de l'initialisation de la machine
			écriture/lecture sur le disque
			
	état actuel:
	  on peut créer des repertoires et des fichiers ainsi que les supprimer.
	  on peut se déplacer dans les repertoires mais lorsque la machine s'arrête
	    on revient au repertoire racine (il faudrait arriver à faire le shell pour
	    avoir un fonctionement 'normal')
	    
	Après l'implémentation du filesystem, l'appel systeme ForkExec ne marchait plus:
	on a donc fait plusieurs test pour comprendre d'ou venait le problème:
		- Lancer un programme simple qui crée un processus qui affiche une chaine de caractère
		  et quitte
		- Lancer un programme qui crée un nouvel espace d'adressage mais ne crée pas le processus
		(cela nous a permit de comprendre que le problème venait des PageTable chargé en mémoire)
		- un pas à pas avec gdb pour voir les changements d'état de la variable
	Ces tests ont mis en évidence une section critique dans ReadAtVirtua que l'on a corrigé.
	
Choix d'implementation:
	Déplacement dans les répertoires
		on a rajoute une fonction pour tester l'existence du repertoire demandé
		cela consiste à ouvrir un fichier(OpenFile) vers le secteur contenant le repertoire
		il n'est pas sauvegarder dans le disque dur donc on repart de la racine à chaque redémarrage de la machine
	
	Supprimer un repertoire
		on ne peut pas supprimer un repertoire non vide (. et .. ne sont pas considére comme des repertoires "normaux")
	
	Créer un repertoire
		

partie 2 : implantation de la table système des fichiers ouverts
aller lire partie 7
	nb max de fichiers ouvert : 10

	choix :
		tableau de fichier ouvert?

	problème :
		ne pas avoir plus de 10 fichiers ouvert
		possibilité d'ouvrir 10 fichier
		orienter correctement les lecture/écriture
		vérifier la fermeture correct des fichiers
		enregistrer les fichiers/répertoire à la bonne place sur le disque

partie 3 : support des accès concurents
	modification des accès concurent
		plusieur lecteur
		un seul écrivain
		même problème dans la structure de fichier

	choix :
		on met les locks sur les structure ou bien sur les threads?
		structure -> plus simple, risque d'empécher des fichiers d'acceder au même ressources alors qu'ils devraient pouvoir
		threads -> plus complexe, bien reflechir à où mettre les lock

partie 4 + 5 : augmentation de la taille max des fichiers + implantation de fichiers de taille variable
	fichiers de taille variable suivant les besoins avec une taille max de presque celle du disque
	modification de l'entête à chaque modification du contenu d'un fichier
		les action d'écriture et de suppression dans un fichier doivent avoir accès à l'entête du fichier

partie 6 : implentation des noms de chemin (path name)
	faire un interpreteur de commande qui va analyser les nom passer en argument
		faire un parseur qui va appeler les fonction de déplacement
		doit se souvenir du dossier courant pour y revenir facilement
		création fichier/répertoire
			une ou deux fonctions? plutot 2
		suppression de fichier/repertoire
			une ou deux fonctions? plutot 1
			repertoire vide, tout supprimer ou bien annuler la suppression
			possibilité d'appel récursif pour tout supprimer
		déplacement dans le systeme de fichier
			une seule fonction
				pointe sur un répertoire, le répertoire précédent est considéré comme un sous répertoire

				
	Explication de l'utilisation des path name
	  par souci de simplicite, très peu d'erreur sont testé donc:
	    - un repertoire qui n'existe pas dans le fichier produira une erreur
	  si on veut partir du repertoire racine, on doit rajouter un / devant le chemin
	  dans le cas contraire, on part du répertoire courant.
	  il faut ajouter manuellement leur utilisation dans toutes les fonctions
	  donc il faut tester si les path name marche dans chaques fonctions
	  (mkdir,cd,rm,...)
	
				
partie 7 : amélioration des accès concurents
	possibilité d'avoir plusieurs lecteur mais un seul écrivain
		->chaque thread doit avoir son propre conteur pour chaque fichier ouvert
	/!\ sychronisation des accès aux entêtes

partie 8 : optimisation des entrée/sortie
	optimisation des accès disques
		rassembler les blocs de données des fichiers
		ordonner les accès à la mémoire en fonction de leur proximité avec l'entrée précédente
			ajout d'une demande d'accès
				on redéfinie toute la file/on place la nouvelle requete et on ne touche pas au reste
	utilisation de tampons d'entrée/sortie
		stocker les opérations dans des tampons de façon à les ordonner au mieux
		stocker les fichiers ouverts dans un tampon pour y avoir accès plus rapidement?

partie 9 : robustesse
	intéruption lors d'une écriture
		en retrouvant la dernière oération dans le tampon?
		moment où l'on modifie l'entête
		autres idées?

reste à faire :
	test unitaire
	partie 3

partie 1:
	les threads noyaux sont créer en créant une nouvelle structure thread et en la mettant dans l'ordonanceur
	choix d'implementation :
		comment passer les informations aux threads :
		comment il est ajouter dans l'ordonanceur (début/fin/milieu...) :
		exit d'un thread (appel de thread::finish + cleanup) :

	raison du plantage d'un thread (penser a mettre un DEBUG) à tester.
		pas assez de ressources
		plus de thread disponible
		mauvais argument
		pas la permission de créer un thread

	do_UserThreadCreate
		va appeler la fonction UserThreadCreate au niveau noyaux et lui allouer ce dont elle a besoin

	StartUserThread
		passage de "arg"

	do_UserThreadExit
		tue la thread et nettoie sont espace de travail
		doit attendre la fin de tous les threads lié à ce thread

	tester!

partie 2:
	!assertion violation!, protéger les requètes décriture et de lecture noyau avec un verroux
	dans SynchConsole, mettre un mutex pour l'écriture et la lecture (pas déjà le cas avec le sémaphore?)

	thread initial quit, qu'est-ce qui se passe?
		a priori la thread liée n'est pas néttoyée et c'est caca
	
partie 3 bonus (à revenir dessus)
